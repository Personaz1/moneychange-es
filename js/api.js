/**
 * API –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤–∞–ª—é—Ç
 */

import { config } from './config.js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è API –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
const CONFIG = {
  API_URL: 'http://localhost:3000/api/exchange-rates',
  CACHE_KEY: 'exchangeRates',
  CACHE_TIMESTAMP_KEY: 'exchangeRatesTimestamp',
  CACHE_DURATION: 5 * 60 * 60 * 1000, // 5 —á–∞—Å–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  DEFAULT_BASE: 'EUR',
  // –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç
  SUPPORTED_CURRENCIES: ['USD', 'EUR', 'GBP', 'CHF', 'CAD', 'NOK', 'SEK', 'DKK']
};

const API_BASE_URL = 'http://localhost:3000/api';

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–ª–∞–≥–∞ –¥–ª—è –≤–∞–ª—é—Ç—ã
 * @param {string} currency –ö–æ–¥ –≤–∞–ª—é—Ç—ã
 * @returns {string} –≠–º–æ–¥–∑–∏ —Ñ–ª–∞–≥–∞
 */
function getCurrencyFlag(currency) {
  // –¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∫–æ–¥–æ–≤ –≤–∞–ª—é—Ç –∏ —Ñ–ª–∞–≥–æ–≤ (—ç–º–æ–¥–∑–∏)
  const flagMap = {
    'USD': 'üá∫üá∏',
    'EUR': 'üá™üá∫',
    'GBP': 'üá¨üáß',
    'CHF': 'üá®üá≠',
    'CAD': 'üá®üá¶',
    'NOK': 'üá≥üá¥',
    'SEK': 'üá∏üá™',
    'DKK': 'üá©üá∞'
  };
  
  return flagMap[currency] || 'üè≥Ô∏è';
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ –≤–∞–ª—é—Ç–∞
 * @param {string} currency –ö–æ–¥ –≤–∞–ª—é—Ç—ã
 * @returns {boolean} true –µ—Å–ª–∏ –≤–∞–ª—é—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
 */
function isCurrencySupported(currency) {
  return CONFIG.SUPPORTED_CURRENCIES.includes(currency);
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∫—É—Ä—Å–æ–≤ –∏–∑ –∫—ç—à–∞
 * @returns {Promise<Object|null>} –û–±—ä–µ–∫—Ç —Å –∫—É—Ä—Å–∞–º–∏ –∏–ª–∏ null, –µ—Å–ª–∏ –∫—ç—à –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
 */
async function loadFromCache() {
  return new Promise((resolve) => {
    try {
      const cachedRates = localStorage.getItem(CONFIG.CACHE_KEY);
      const cachedTimestamp = localStorage.getItem(CONFIG.CACHE_TIMESTAMP_KEY);
      
      if (!cachedRates || !cachedTimestamp || 
        Date.now() - parseInt(cachedTimestamp, 10) > CONFIG.CACHE_DURATION) {
        resolve(null);
        return;
      }
      
      const rates = JSON.parse(cachedRates);
      console.log('–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∫—É—Ä—Å—ã –∏–∑ –∫—ç—à–∞');
      resolve(rates);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑ –∫—ç—à–∞:', error);
      resolve(null);
    }
  });
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤ –∫—ç—à
 * @param {Object} rates –û–±—ä–µ–∫—Ç —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
 */
function saveToCache(rates) {
  try {
    localStorage.setItem(CONFIG.CACHE_KEY, JSON.stringify(rates));
    localStorage.setItem(CONFIG.CACHE_TIMESTAMP_KEY, Date.now().toString());
    console.log('–ö—É—Ä—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –∫—ç—à:', error);
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç
 */
async function fetchRates() {
  try {
    const cachedRates = await loadFromCache();
    if (cachedRates) {
      return cachedRates;
    }
    
    const response = await fetch(CONFIG.API_URL);
    if (!response.ok) {
      throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
    }
    
    const data = await response.json();
    if (!data.rates) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç API');
    }
    
    saveToCache(data.rates);
    return data.rates;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤:', error);
    return null;
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
 * @param {number} amount –°—É–º–º–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 * @param {string} fromCurrency –ò—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞
 * @param {string} toCurrency –¶–µ–ª–µ–≤–∞—è –≤–∞–ª—é—Ç–∞
 * @param {string} operation 'buy' –∏–ª–∏ 'sell'
 * @returns {Promise<number>} –°–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞
 */
async function convertCurrency(amount, fromCurrency, toCurrency, operation = 'sell') {
  try {
    const rates = await fetchRates();
    if (!rates) {
      throw new Error('–ö—É—Ä—Å—ã –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã');
    }
    
    if (fromCurrency === toCurrency) {
      return amount;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å –¥–ª—è –ø–∞—Ä—ã –≤–∞–ª—é—Ç
    const rate = rates[`${fromCurrency}/${toCurrency}`];
    if (!rate) {
      throw new Error('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫—É—Ä—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
    return amount * (operation === 'buy' ? rate.buy : rate.sell);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error);
    return 0;
  }
}

/**
 * API-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–µ–Ω–¥–æ–º
 */
class ApiClient {
    constructor(baseUrl) {
        this.baseUrl = baseUrl || config.API_BASE_URL;
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
     * @returns {string} –ü–æ–ª–Ω—ã–π URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
     */
    getUrl(endpoint) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ endpoint —Å–æ —Å–ª–µ—à–∞
        if (endpoint.startsWith('/')) {
            endpoint = endpoint.substring(1);
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
        return `${this.baseUrl}/${endpoint}`;
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ API
     * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
     * @param {Object} headers - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise<any>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
     */
    async get(endpoint, headers = {}) {
        try {
            const response = await fetch(this.getUrl(endpoint), {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    ...headers
                }
            });
            
            return this.handleResponse(response);
        } catch (error) {
            this.handleError(error);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ API
     * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     * @param {Object} headers - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise<any>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
     */
    async post(endpoint, data = {}, headers = {}) {
        try {
            const response = await fetch(this.getUrl(endpoint), {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    ...headers
                },
                body: JSON.stringify(data)
            });
            
            return this.handleResponse(response);
        } catch (error) {
            this.handleError(error);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç PUT-–∑–∞–ø—Ä–æ—Å –∫ API
     * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     * @param {Object} headers - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise<any>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
     */
    async put(endpoint, data = {}, headers = {}) {
        try {
            const response = await fetch(this.getUrl(endpoint), {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    ...headers
                },
                body: JSON.stringify(data)
            });
            
            return this.handleResponse(response);
        } catch (error) {
            this.handleError(error);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç PATCH-–∑–∞–ø—Ä–æ—Å –∫ API
     * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
     * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
     * @param {Object} headers - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise<any>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
     */
    async patch(endpoint, data = {}, headers = {}) {
        try {
            const response = await fetch(this.getUrl(endpoint), {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    ...headers
                },
                body: JSON.stringify(data)
            });
            
            return this.handleResponse(response);
        } catch (error) {
            this.handleError(error);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç DELETE-–∑–∞–ø—Ä–æ—Å –∫ API
     * @param {string} endpoint - –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ API
     * @param {Object} headers - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
     * @returns {Promise<any>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
     */
    async delete(endpoint, headers = {}) {
        try {
            const response = await fetch(this.getUrl(endpoint), {
                method: 'DELETE',
                headers: {
                    'Accept': 'application/json',
                    ...headers
                }
            });
            
            return this.handleResponse(response);
        } catch (error) {
            this.handleError(error);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     * @param {Response} response - –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
     * @returns {Promise<any>} –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
     */
    async handleResponse(response) {
        if (!response.ok) {
            // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ OK, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
            let errorData = {};
            try {
                errorData = await response.json();
            } catch (e) {
                // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç—É—Å-—Ç–µ–∫—Å—Ç
                errorData = { message: response.statusText };
            }
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            const error = new Error(errorData.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞');
            error.status = response.status;
            error.data = errorData;
            throw error;
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ç–µ–ª–æ –∫–∞–∫ JSON
        // –î–ª—è –ø—É—Å—Ç—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 204 No Content) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        if (response.status === 204 || response.headers.get('content-length') === '0') {
            return null;
        }
        
        return await response.json();
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
     * @param {Error} error - –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
     */
    handleError(error) {
        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        console.error('API request failed:', error);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ (—Å–µ—Ç–µ–≤–∞—è, —Å–µ—Ä–≤–µ—Ä–Ω–∞—è –∏ —Ç.–¥.)
        if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
            // –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ (–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è, CORS –∏ —Ç.–¥.)
            error.message = '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.';
        }
        
        // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–∑—ã–≤–∞—é—â–∏–º –∫–æ–¥–æ–º
        throw error;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API-–∫–ª–∏–µ–Ω—Ç–∞
export const api = new ApiClient();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
export {
    fetchRates,
    convertCurrency,
    getCurrencyFlag,
    isCurrencySupported,
    CONFIG
}; 